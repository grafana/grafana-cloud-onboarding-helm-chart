---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kepler/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-kepler
  namespace: test-namespace
  labels:
    helm.sh/chart: kepler-0.6.0
    app.kubernetes.io/name: kepler
    app.kubernetes.io/component: exporter
    app.kubernetes.io/version: "release-0.8.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kube-state-metrics/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-6.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.16.0"
  name: test-kube-state-metrics
  namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/node-exporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-node-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: node-exporter-4.47.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: node-exporter
    app.kubernetes.io/name: node-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.9.1"
automountServiceAccountToken: false
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/windows-exporter/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-windows-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: windows-exporter-0.10.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: windows-exporter
    app.kubernetes.io/name: windows-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.30.8"
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: test-alloy-operator
  namespace: test-namespace
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
automountServiceAccountToken: true
---
# Source: grafana-cloud-onboarding/templates/fleet_management_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: "grafana-cloud-fleet-management-test-grafana-cloud-onboarding"
  namespace: "test-namespace"
type: Opaque
data:
  username: "MTIzNDU2"
  password: "Z2xjX3RoaXNpc215cGFzc3dvcmQ="
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/windows-exporter/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-windows-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: windows-exporter-0.10.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: windows-exporter
    app.kubernetes.io/name: windows-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.30.8"
data:
  config.yml: |
    collectors:
      enabled: '[defaults],memory,container'
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kepler/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: test-kepler-clusterrole
rules:
  - apiGroups: [""]
    resources:
      - nodes/metrics # access /metrics/resource
      - nodes/proxy
      - nodes/stats
      - pods
    verbs:
      - get
      - watch
      - list
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kube-state-metrics/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-6.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.16.0"
  name: test-kube-state-metrics
rules:

- apiGroups: ["certificates.k8s.io"]
  resources:
  - certificatesigningrequests
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - cronjobs
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - daemonsets
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - deployments
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - endpoints
  verbs: ["list", "watch"]

- apiGroups: ["autoscaling"]
  resources:
  - horizontalpodautoscalers
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - ingresses
  verbs: ["list", "watch"]

- apiGroups: ["batch"]
  resources:
  - jobs
  verbs: ["list", "watch"]

- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - limitranges
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - mutatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - namespaces
  verbs: ["list", "watch"]

- apiGroups: ["networking.k8s.io"]
  resources:
  - networkpolicies
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - nodes
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumeclaims
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - persistentvolumes
  verbs: ["list", "watch"]

- apiGroups: ["policy"]
  resources:
    - poddisruptionbudgets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - pods
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - replicasets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - replicationcontrollers
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - resourcequotas
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - secrets
  verbs: ["list", "watch"]

- apiGroups: [""]
  resources:
  - services
  verbs: ["list", "watch"]

- apiGroups: ["apps"]
  resources:
  - statefulsets
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - storageclasses
  verbs: ["list", "watch"]

- apiGroups: ["admissionregistration.k8s.io"]
  resources:
    - validatingwebhookconfigurations
  verbs: ["list", "watch"]

- apiGroups: ["storage.k8s.io"]
  resources:
    - volumeattachments
  verbs: ["list", "watch"]
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/alloy-manager.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: test-alloy-operator-alloy-manager
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - collectors.grafana.com
    resources:
      - alloys
      - alloys/status
      - alloys/finalizers
    verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/alloy-objects.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: test-alloy-operator
rules:
  # Rules which allow the management of ConfigMaps, ServiceAccounts, and Services.
  - apiGroups: [""]
    resources: ["configmaps", "secrets", "serviceaccounts", "services"]
    verbs: ["*"]
  # Rules which allow the management of DaemonSets, Deployments, and StatefulSets.
  - apiGroups: ["apps"]
    resources: ["daemonsets", "deployments", "statefulsets"]
    verbs: ["*"]
  # Rules which allow the management of Horizontal Pod Autoscalers.
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["*"]
  # Rules which allow the management of Ingresses and NetworkPolicies.
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses", "networkpolicies"]
    verbs: ["*"]
  # Rules which allow the management of PodDisruptionBudgets.
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["*"]
  # Rules which allow the management of ClusterRoles and ClusterRoleBindings.
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: ["clusterroles", "clusterrolebindings"]
    verbs: ["*"]
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kepler/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-kepler-clusterrole-binding
roleRef:
  kind: ClusterRole
  name: test-kepler-clusterrole
  apiGroup: "rbac.authorization.k8s.io"
subjects:
  - kind: ServiceAccount
    name: test-kepler
    namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kube-state-metrics/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:    
    helm.sh/chart: kube-state-metrics-6.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.16.0"
  name: test-kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: test-kube-state-metrics
subjects:
- kind: ServiceAccount
  name: test-kube-state-metrics
  namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/alloy-manager.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-alloy-operator-alloy-manager
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: test-alloy-operator-alloy-manager
subjects:
  - kind: ServiceAccount
    name: test-alloy-operator
    namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/alloy-objects.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: test-alloy-operator
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: test-alloy-operator
subjects:
  - kind: ServiceAccount
    name: test-alloy-operator
    namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/leader-election.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: test-alloy-operator-leader-election-role
  namespace: test-namespace
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/rbac/leader-election.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: test-alloy-operator-leader-election-rolebinding
  namespace: test-namespace
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: test-alloy-operator-leader-election-role
subjects:
  - kind: ServiceAccount
    name: test-alloy-operator
    namespace: test-namespace
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kepler/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-kepler
  namespace: test-namespace
  labels:
    helm.sh/chart: kepler-0.6.0
    app.kubernetes.io/name: kepler
    app.kubernetes.io/component: exporter
    app.kubernetes.io/version: "release-0.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9102
      targetPort: http
      protocol: TCP
  selector:
    app.kubernetes.io/name: kepler
    app.kubernetes.io/component: exporter
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kube-state-metrics/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-kube-state-metrics
  namespace: test-namespace
  labels:    
    helm.sh/chart: kube-state-metrics-6.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.16.0"
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: "ClusterIP"
  ports:
  - name: "http"
    protocol: TCP
    port: 8080
    targetPort: 8080
  
  selector:    
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/node-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-node-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: node-exporter-4.47.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: node-exporter
    app.kubernetes.io/name: node-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.9.1"
  annotations:
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  ports:
    - port: 9100
      targetPort: 9100
      protocol: TCP
      name: metrics
  selector:
    app.kubernetes.io/name: node-exporter
    app.kubernetes.io/instance: test
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/windows-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-windows-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: windows-exporter-0.10.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: windows-exporter
    app.kubernetes.io/name: windows-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.30.8"
spec:
  type: ClusterIP
  ports:
    - port: 9182
      targetPort: metrics
      protocol: TCP
      appProtocol: http
      name: metrics
  selector:
    app.kubernetes.io/name: windows-exporter
    app.kubernetes.io/instance: test
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-alloy-operator
  namespace: test-namespace
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 8081
      targetPort: http
      protocol: TCP
    - name: metrics
      port: 8082
      targetPort: metrics
      protocol: TCP
  selector:
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kepler/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: test-kepler
  namespace: test-namespace
  labels:
    helm.sh/chart: kepler-0.6.0
    app.kubernetes.io/name: kepler
    app.kubernetes.io/component: exporter
    app.kubernetes.io/version: "release-0.8.0"
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: kepler
      app.kubernetes.io/component: exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kepler
        app.kubernetes.io/component: exporter
    spec:
      hostNetwork: true
      serviceAccountName: test-kepler
      containers:
      - name: kepler-exporter
        image: "quay.io/sustainable_computing_io/kepler:release-0.8.0"
        imagePullPolicy: Always
        securityContext:
            privileged: true
        args:
          - -v=$(KEPLER_LOG_LEVEL)
        env:
          - name: NODE_IP
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
          - name: METRIC_PATH
            value: "/metrics"
          - name: BIND_ADDRESS
            value: "0.0.0.0:9102"
          - name: "CGROUP_METRICS"
            value: "*"
          - name: "CPU_ARCH_OVERRIDE"
            value: ""
          - name: "ENABLE_EBPF_CGROUPID"
            value: "true"
          - name: "ENABLE_GPU"
            value: "true"
          - name: "ENABLE_PROCESS_METRICS"
            value: "false"
          - name: "ENABLE_QAT"
            value: "false"
          - name: "EXPOSE_CGROUP_METRICS"
            value: "false"
          - name: "EXPOSE_HW_COUNTER_METRICS"
            value: "true"
          - name: "EXPOSE_IRQ_COUNTER_METRICS"
            value: "true"
          - name: "KEPLER_LOG_LEVEL"
            value: "1"
        ports:
        - containerPort: 9102
          hostPort: 9102
          name: http
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 60
          successThreshold: 1
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
        startupProbe:
          httpGet:
            path: /healthz
            port: http
            scheme: HTTP
          initialDelaySeconds: 1
        volumeMounts:
          - name: lib-modules
            mountPath: /lib/modules
          - name: tracing
            mountPath: /sys
          - name: proc
            mountPath: /proc
          - name: config-dir
            mountPath: /etc/kepler
          - name: usr-src
            mountPath: /usr/src
      volumes:
        - name: lib-modules
          hostPath:
            path: /lib/modules
            type: DirectoryOrCreate
        - name: tracing
          hostPath:
            path: /sys
            type: Directory
        - name: proc
          hostPath:
            path: /proc
            type: Directory
        - name: config-dir
          emptyDir:
            sizeLimit: 100Ki
        - name: usr-src
          hostPath:
            path: /usr/src
            type: Directory
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/node-exporter/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: test-node-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: node-exporter-4.47.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: node-exporter
    app.kubernetes.io/name: node-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.9.1"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-exporter
      app.kubernetes.io/instance: test
  revisionHistoryLimit: 10
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        helm.sh/chart: node-exporter-4.47.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: node-exporter
        app.kubernetes.io/name: node-exporter
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "1.9.1"
    spec:
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      serviceAccountName: test-node-exporter
      containers:
        - name: node-exporter
          image: quay.io/prometheus/node-exporter:v1.9.1
          imagePullPolicy: IfNotPresent
          args:
            - --path.procfs=/host/proc
            - --path.sysfs=/host/sys
            - --path.rootfs=/host/root
            - --path.udev.data=/host/root/run/udev/data
            - --web.listen-address=[$(HOST_IP)]:9100
          securityContext:
            readOnlyRootFilesystem: true
          env:
            - name: HOST_IP
              value: 0.0.0.0
          ports:
            - name: metrics
              containerPort: 9100
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /
              port: 9100
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /
              port: 9100
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - name: proc
              mountPath: /host/proc
              readOnly:  true
            - name: sys
              mountPath: /host/sys
              readOnly: true
            - name: root
              mountPath: /host/root
              mountPropagation: HostToContainer
              readOnly: true
      hostNetwork: true
      hostPID: true
      hostIPC: false
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/compute-type
                operator: NotIn
                values:
                - fargate
              - key: type
                operator: NotIn
                values:
                - virtual-kubelet
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: proc
          hostPath:
            path: /proc
        - name: sys
          hostPath:
            path: /sys
        - name: root
          hostPath:
            path: /
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/windows-exporter/templates/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: test-windows-exporter
  namespace: test-namespace
  labels:
    helm.sh/chart: windows-exporter-0.10.3
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: windows-exporter
    app.kubernetes.io/name: windows-exporter
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "0.30.8"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: windows-exporter
      app.kubernetes.io/instance: test
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        helm.sh/chart: windows-exporter-0.10.3
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: windows-exporter
        app.kubernetes.io/name: windows-exporter
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "0.30.8"
    spec:
      automountServiceAccountToken: false
      securityContext:
        windowsOptions:
          hostProcess: true
          runAsUserName: NT AUTHORITY\system
      initContainers:
        - name: configure-firewall
          image: ghcr.io/prometheus-community/windows-exporter:0.30.8
          command: [ "powershell" ]
          args: [ "New-NetFirewallRule", "-DisplayName", "'windows-exporter'", "-Direction", "inbound", "-Profile", "Any", "-Action", "Allow", "-LocalPort", "9182", "-Protocol", "TCP" ]
      serviceAccountName: test-windows-exporter
      containers:
        - name: windows-exporter
          image: ghcr.io/prometheus-community/windows-exporter:0.30.8
          imagePullPolicy: IfNotPresent
          args:
            - --config.file=%CONTAINER_SANDBOX_MOUNT_POINT%/config.yml
            - --collector.textfile.directories=%CONTAINER_SANDBOX_MOUNT_POINT%
            - --web.listen-address=:9182
          env:
          ports:
            - name: metrics
              containerPort: 9182
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /health
              port: 9182
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              path: /health
              port: 9182
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          volumeMounts:
            - name: config
              mountPath: /config.yml
              subPath: config.yml
      hostNetwork: true
      hostPID: true
      nodeSelector:
        kubernetes.io/os: windows
      tolerations:
        - effect: NoSchedule
          operator: Exists
      volumes:
        - name: config
          configMap:
            name: test-windows-exporter
---
# Source: grafana-cloud-onboarding/charts/additionalComponents/charts/kube-state-metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-kube-state-metrics
  namespace: test-namespace
  labels:    
    helm.sh/chart: kube-state-metrics-6.1.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
    app.kubernetes.io/part-of: kube-state-metrics
    app.kubernetes.io/name: kube-state-metrics
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "2.16.0"
spec:
  selector:
    matchLabels:      
      app.kubernetes.io/name: kube-state-metrics
      app.kubernetes.io/instance: test
  replicas: 1
  strategy:
    type: RollingUpdate
  revisionHistoryLimit: 10
  template:
    metadata:
      labels:        
        helm.sh/chart: kube-state-metrics-6.1.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: metrics
        app.kubernetes.io/part-of: kube-state-metrics
        app.kubernetes.io/name: kube-state-metrics
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "2.16.0"
    spec:
      automountServiceAccountToken: true
      hostNetwork: false
      serviceAccountName: test-kube-state-metrics
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
        seccompProfile:
          type: RuntimeDefault
      dnsPolicy: ClusterFirst
      containers:
      - name: kube-state-metrics
        args:
        - --port=8080
        - --resources=certificatesigningrequests,configmaps,cronjobs,daemonsets,deployments,endpoints,horizontalpodautoscalers,ingresses,jobs,leases,limitranges,mutatingwebhookconfigurations,namespaces,networkpolicies,nodes,persistentvolumeclaims,persistentvolumes,poddisruptionbudgets,pods,replicasets,replicationcontrollers,resourcequotas,secrets,services,statefulsets,storageclasses,validatingwebhookconfigurations,volumeattachments
        imagePullPolicy: IfNotPresent
        image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.16.0
        ports:
        - containerPort: 8080
          name: "http"
        livenessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            path: /livez
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            httpHeaders:
            path: /readyz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        resources:
          {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
---
# Source: grafana-cloud-onboarding/charts/alloy-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-alloy-operator
  namespace: test-namespace
  labels:
    helm.sh/chart: alloy-operator-0.3.4
    app.kubernetes.io/name: alloy-operator
    app.kubernetes.io/instance: test
    app.kubernetes.io/version: "1.1.2"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: alloy-operator
      app.kubernetes.io/instance: test
  template:
    metadata:
      labels:
        helm.sh/chart: alloy-operator-0.3.4
        app.kubernetes.io/name: alloy-operator
        app.kubernetes.io/instance: test
        app.kubernetes.io/version: "1.1.2"
        app.kubernetes.io/managed-by: Helm
    spec:
      serviceAccountName: test-alloy-operator
      containers:
        - name: alloy-operator
          image: "ghcr.io/grafana/alloy-operator:1.1.2"
          imagePullPolicy: IfNotPresent
          args:
            - --leader-elect
            - --leader-election-id=test-alloy-operator
            - --health-probe-bind-address=:8081
            - --metrics-bind-address=:8082
          ports:
            - name: http
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8082
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /readyz
              port: 8081
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits: {}
            requests: {}
          securityContext:
            runAsNonRoot: true
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: grafana-cloud-onboarding/templates/alloy.yaml
apiVersion: collectors.grafana.com/v1alpha1
kind: Alloy
metadata:
  name: test-alloy-daemon
  namespace: test-namespace
spec: 
  alloy:
    clustering:
      enabled: false
      name: ""
      portName: http
    configMap:
      content: |-
        remote.kubernetes.secret "grafana_cloud_fleet_management" {
          name      = "grafana-cloud-fleet-management-test-grafana-cloud-onboarding"
          namespace = "test-namespace"
        }
        remotecfg {
          id = sys.env("GCLOUD_FM_COLLECTOR_ID")
          url = "https://fleet.grafana.com"
          basic_auth {
            username = convert.nonsensitive(remote.kubernetes.secret.grafana_cloud_fleet_management.data["username"])
            password = remote.kubernetes.secret.grafana_cloud_fleet_management.data["password"]
          }
          poll_frequency = "5m"
          attributes = {
            "cluster" = "alloy-example",
            "namespace" = "test-namespace",
            "platform" = "kubernetes",
            "release" = "test",
            "source" = "grafana-cloud-onboarding",
            "sourceVersion" = "0.1.0",
            "workloadName" = "alloy-daemon",
            "workloadType" = "daemonset",
          }
        }
        logging {
          level = "debug"
        }
        livedebugging {
          enabled = false
        }
      create: true
      key: null
      name: null
    enableReporting: true
    envFrom: []
    extraArgs: []
    extraEnv:
    - name: CLUSTER_NAME
      value: alloy-example
    - name: GCLOUD_RW_API_KEY
      valueFrom:
        secretKeyRef:
          key: password
          name: grafana-cloud-fleet-management-test-grafana-cloud-onboarding
          namespace: test-namespace
    - name: NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: GCLOUD_FM_COLLECTOR_ID
      value: alloy-$(CLUSTER_NAME)-$(NAMESPACE)-$(POD_NAME)
    extraPorts: []
    hostAliases: []
    lifecycle: {}
    listenAddr: 0.0.0.0
    listenPort: 12345
    listenScheme: HTTP
    livenessProbe: {}
    mounts:
      dockercontainers: true
      extra:
      - mountPath: /var/lib/alloy
        name: alloy-storage
        readOnly: false
      varlog: true
    resources: {}
    securityContext:
      privileged: true
    stabilityLevel: experimental
    storagePath: /var/lib/alloy
    uiPathPrefix: /
  configReloader:
    customArgs: []
    enabled: true
    image:
      digest: ""
      registry: quay.io
      repository: prometheus-operator/prometheus-config-reloader
      tag: v0.81.0
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
    securityContext: {}
  controller:
    affinity: {}
    autoscaling:
      enabled: false
      horizontal:
        enabled: false
        maxReplicas: 5
        minReplicas: 1
        scaleDown:
          policies: []
          selectPolicy: Max
          stabilizationWindowSeconds: 300
        scaleUp:
          policies: []
          selectPolicy: Max
          stabilizationWindowSeconds: 0
        targetCPUUtilizationPercentage: 0
        targetMemoryUtilizationPercentage: 80
      maxReplicas: 5
      minReplicas: 1
      scaleDown:
        policies: []
        selectPolicy: Max
        stabilizationWindowSeconds: 300
      scaleUp:
        policies: []
        selectPolicy: Max
        stabilizationWindowSeconds: 0
      targetCPUUtilizationPercentage: 0
      targetMemoryUtilizationPercentage: 80
      vertical:
        enabled: false
        recommenders: []
        resourcePolicy:
          containerPolicies:
          - containerName: alloy
            controlledResources:
            - cpu
            - memory
            controlledValues: RequestsAndLimits
            maxAllowed: {}
            minAllowed: {}
        updatePolicy: null
    dnsPolicy: ClusterFirst
    enableStatefulSetAutoDeletePVC: false
    extraAnnotations: {}
    extraContainers: []
    hostNetwork: false
    hostPID: true
    initContainers: []
    nodeSelector: {}
    parallelRollout: true
    podAnnotations: {}
    podDisruptionBudget:
      enabled: false
      maxUnavailable: null
      minAvailable: null
    podLabels: {}
    priorityClassName: ""
    replicas: 1
    terminationGracePeriodSeconds: null
    tolerations: []
    topologySpreadConstraints: []
    type: daemonset
    updateStrategy: {}
    volumeClaimTemplates: []
    volumes:
      extra:
      - hostPath:
          path: /var/lib/alloy
          type: DirectoryOrCreate
        name: alloy-storage
  crds:
    create: false
  extraObjects: []
  global:
    image:
      pullSecrets: []
      registry: ""
    podSecurityContext: {}
  image:
    digest: null
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: grafana/alloy-dev
    tag: v1.10.0-devel-5126d5f
  ingress:
    annotations: {}
    enabled: false
    extraPaths: []
    faroPort: 12347
    hosts:
    - chart-example.local
    labels: {}
    path: /
    pathType: Prefix
    tls: []
  nameOverride: alloy-daemon
  rbac:
    create: true
  service:
    annotations: {}
    clusterIP: ""
    enabled: true
    internalTrafficPolicy: Cluster
    nodePort: 31128
    type: ClusterIP
  serviceAccount:
    additionalLabels: {}
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: null
  serviceMonitor:
    additionalLabels: {}
    enabled: false
    interval: ""
    metricRelabelings: []
    relabelings: []
    tlsConfig: {}
